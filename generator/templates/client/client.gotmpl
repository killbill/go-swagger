// Code generated by go-swagger; DO NOT EDIT.


{{ if .Copyright -}}// {{ comment .Copyright -}}{{ end }}


package {{ .Name }}

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
  "net/http"
  "context"
  "github.com/go-openapi/errors"
  "github.com/go-openapi/swag"
  "github.com/go-openapi/runtime"
  "github.com/go-openapi/validate"

  strfmt "github.com/go-openapi/strfmt"

  {{ range .DefaultImports }}{{ printf "%q" .}}
  {{ end }}
  {{ range $key, $value := .Imports }}{{ $key }} {{ printf "%q" $value }}
  {{ end }}
)

// New creates a new {{ humanize .Name }} API client.
func New(transport runtime.ClientTransport,
         formats strfmt.Registry,
         authInfo runtime.ClientAuthInfoWriter,
         defaults KillbillDefaults) *Client {

  return &Client{transport: transport, formats: formats, authInfo: authInfo, defaults: defaults}
}

// killbill default values. When a call is made to an operation, these values are used
// if params doesn't specify them.
type KillbillDefaults interface {
  // Default CreatedBy. If not set explicitly in params, this will be used.
  XKillbillCreatedBy() *string  
  // Default Comment. If not set explicitly in params, this will be used.
  XKillbillComment() *string
  // Default Reason. If not set explicitly in params, this will be used.
  XKillbillReason() *string
  // Default WithStackTrace. If not set explicitly in params, this will be used.
  KillbillWithStackTrace() *bool
}

/*
Client {{ if .Summary }}{{ .Summary }}{{ if .Description }}

{{ blockcomment .Description }}{{ end }}{{ else if .Description}}{{ blockcomment .Description }}{{ else }}for {{ humanize .Name }} API{{ end }}
*/
type Client struct {
  transport runtime.ClientTransport
  formats strfmt.Registry
  authInfo runtime.ClientAuthInfoWriter
  defaults KillbillDefaults
}

// I{{ pascalize .Name }} - interface for {{ pascalize .Name }} client.
type I{{ pascalize $.Name }} interface {
  {{ range .Operations }}/*
{{ pascalize .Name }} {{ if .Summary }}{{ pluralizeFirstWord (humanize .Summary) }}{{ if .Description }}

{{ blockcomment .Description }}{{ end }}{{ else if .Description}}{{ blockcomment .Description }}{{ else }}{{ humanize .Name }} API{{ end }}
*/
{{ pascalize .Name }}(ctx context.Context, params *{{ pascalize .Name }}Params{{ if .Authorized }}{{end}}{{ if .HasStreamingResponse }}, writer io.Writer{{ end }}) {{ if .SuccessResponse }}({{ range .SuccessResponses }}*{{ pascalize .Name }}, {{ end }}{{ end }}error{{ if .SuccessResponse }}){{ end }}

  {{ end }}
}

{{ range .Operations }}/*
{{ pascalize .Name }} {{ if .Summary }}{{ pluralizeFirstWord (humanize .Summary) }}{{ if .Description }}

{{ blockcomment .Description }}{{ end }}{{ else if .Description}}{{ blockcomment .Description }}{{ else }}{{ humanize .Name }} API{{ end }}
*/
func (a *Client) {{ pascalize .Name }}(ctx context.Context, params *{{ pascalize .Name }}Params{{ if .Authorized }}{{end}}{{ if .HasStreamingResponse }}, writer io.Writer{{ end }}) {{ if .SuccessResponse }}({{ range .SuccessResponses }}*{{ pascalize .Name }}, {{ end }}{{ end }}error{{ if .SuccessResponse }}){{ end }} {
  // TODO: Validate the params before sending
  {{ $isCreateRequest := and (eq .SuccessResponse.Code 201) (eq (len .SuccessResponses) 1) -}}
  if params == nil {
    params = New{{ pascalize .Name }}Params()
  }
  {{- if $isCreateRequest }}
  getParams := New{{ pascalize .Name }}Params()
  getParams.Context = ctx
  {{- end }}
  params.Context = ctx
  {{- range .Params -}}
    {{- $name := pascalize .Name -}}
    {{ if eq $name "XKillbillCreatedBy" }}
      if params.XKillbillCreatedBy == "" && a.defaults.XKillbillCreatedBy() != nil {
        params.XKillbillCreatedBy = *a.defaults.XKillbillCreatedBy()
      }
      {{ if $isCreateRequest -}}
    	getParams.XKillbillCreatedBy = params.XKillbillCreatedBy
      {{- end }}
    {{- end }}
    {{- if eq $name "XKillbillComment" }}
      if params.XKillbillComment == nil && a.defaults.XKillbillComment() != nil {
        params.XKillbillComment = a.defaults.XKillbillComment()
      }
      {{ if $isCreateRequest -}}
	    getParams.XKillbillComment = params.XKillbillComment
      {{- end }}
    {{- end }}
    {{- if eq $name "XKillbillReason" }}
      if params.XKillbillReason == nil && a.defaults.XKillbillReason() != nil {
        params.XKillbillReason = a.defaults.XKillbillReason()
      }
      {{ if $isCreateRequest -}}
	    getParams.XKillbillReason = params.XKillbillReason
      {{- end }}
    {{- end }}
  {{- end }}
      if params.WithStackTrace == nil && a.defaults.KillbillWithStackTrace() != nil {
        params.WithStackTrace = a.defaults.KillbillWithStackTrace()
      }
      {{ if $isCreateRequest -}}
	    getParams.WithStackTrace = params.WithStackTrace
    {{- end }}

  {{ $length := len .SuccessResponses }}
  {{ if .SuccessResponse }}result{{else}}_{{ end }}, err := a.transport.Submit(&runtime.ClientOperation{
    ID: {{ printf "%q" .Name }},
    Method: {{ printf "%q" .Method }},
    PathPattern: {{ printf "%q" .Path }},
    ProducesMediaTypes: {{ printf "%#v" .ProducesMediaTypes }},
    ConsumesMediaTypes: {{ printf "%#v" .ConsumesMediaTypes }},
    Schemes: {{ printf "%#v" .Schemes }},
    Params: params,
    Reader: &{{ pascalize .Name }}Reader{formats: a.formats{{ if .HasStreamingResponse }}, writer: writer{{ end }}},{{ if .Authorized }}
    AuthInfo: a.authInfo,{{ end}}
    Context: params.Context,
    Client: params.HTTPClient,
  })
  if err != nil {
    return {{ if .SuccessResponse }}{{ padSurround "nil" "nil" 0 $length }}, {{ end }}err
  }
  {{- if not $isCreateRequest }}
  {{ if .SuccessResponse }}{{ if eq $length 1 }}return result.(*{{ pascalize .SuccessResponse.Name }}), nil{{ else }}switch value := result.(type) { {{ range $i, $v := .SuccessResponses }}
    case *{{ pascalize $v.Name }}:
      return {{ padSurround "value" "nil" $i $length }}, nil{{ end }} }
  return {{ padSurround "nil" "nil" 0 $length }}, nil{{ end }}
  {{ else }}return nil{{ end }}
  {{ else }}
  createdResult := result.(*{{ pascalize .SuccessResponse.Name }})
	location := kbcommon.ParseLocationHeader(createdResult.HttpResponse.GetHeader("Location"))
	if !params.ProcessLocationHeader || location == "" {
		return createdResult, nil
	}

  getResult, err := a.transport.Submit(&runtime.ClientOperation{
    ID: {{ printf "%q" .Name }},
    Method: "GET",
    PathPattern: location,
    ProducesMediaTypes: {{ printf "%#v" .ProducesMediaTypes }},
    ConsumesMediaTypes: {{ printf "%#v" .ConsumesMediaTypes }},
    Schemes: {{ printf "%#v" .Schemes }},
    Params: getParams,
    Reader: &{{ pascalize .Name }}Reader{formats: a.formats{{ if .HasStreamingResponse }}, writer: writer{{ end }}},{{ if .Authorized }}
    AuthInfo: a.authInfo,{{ end}}
    Context: getParams.Context,
    Client: getParams.HTTPClient,
  })
  if err != nil {
    return nil, err
  }
	return getResult.(*{{ pascalize .SuccessResponse.Name }}), nil
  {{end}}
}
{{ end }}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
  a.transport = transport
}
